/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    static bool comp(Interval a,Interval b)
    {
        return a.start<b.start||a.start==b.start&&a.end<b.end;
    }
    vector<Interval> merge(vector<Interval>& intervals) {
        vector<Interval>ans;
        sort(intervals.begin(),intervals.end(),comp);
        /*sort()函数有三个参数，后面是排序依据，如果是升序
        则定义 bool function(int x,int y){return x<y;}
        以此可以知道降序是怎么排列*/
        vector<Interval>::iterator iter=intervals.begin();
        for(;iter!=intervals.end();iter++)
        {
            if(iter==intervals.begin()||(*iter).start>ans.back().end)ans.push_back(*iter);
            else if((*iter).end<ans.back().end)continue;
            else ans.back().end=(*iter).end;
        }
        return ans;
    }

};

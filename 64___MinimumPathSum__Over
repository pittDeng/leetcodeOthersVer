
//此题同样可以用一维数组，这一题甚至可以做到不占用额外内存，直接在grid上进行计算
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int row=grid.size();
        if(row<1)return 0;
        int col=grid[0].size();
        if(col<1)return 0;
        vector<vector<int>>dp(row,vector<int>(col));
        dp[0][0]=grid[0][0];
        for(int i=1;i<row;i++)
            dp[i][0]=dp[i-1][0]+grid[i][0];
        for(int i=1;i<col;i++)
            dp[0][i]=dp[0][i-1]+grid[0][i];
        for(int i=1;i<row;i++)
            for(int j=1;j<col;j++)
                dp[i][j]=min(dp[i][j-1],dp[i-1][j])+grid[i][j];
        return dp[row-1][col-1];
    }
};



//使用一维数组的情况
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int row=grid.size();
        if(row<1)return 0;
        int col=grid[0].size();
        if(col<1)return 0;
        vector<int>dp(col);
        dp[0]=grid[0][0];
        for(int i=1;i<col;i++)
            dp[i]=dp[i-1]+grid[0][i];
        for(int i=1;i<row;i++)
        {
            dp[0]=dp[0]+grid[i][0];
            for(int j=1;j<col;j++)
            {
                dp[j]=min(dp[j-1],dp[j])+grid[i][j];
            }
        }
        return dp[col-1];
    }
};
